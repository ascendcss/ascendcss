/// @author EDGrid
/// https://github.com/escueladigital/EDgrid

/// Devuelve true si el breakpoint es parte del core

@function isCoreBreakpoint($bp) {
    @if map-get($breakpoints, $bp) {
        @return true;
    } @else {
        @return false;
    }
}

/// Devuelve true si el breakpint es válido (em, rem, px)
/// @param   {number} $bp - breakpoint a verificar.
@function isValidBreakpoint($bp) {
    @if type-of($bp) == number and (unit($bp) == "px" or unit($bp) == "em" or unit($bp) == "rem") {
        @return true;
    } @else {
        @return false;
    }
}

/// Obtiene un breakpoint del core
/// @param   {number} $bp - breakpoint a obtener.

@function getBp($bp) {
    @return map-get($breakpoints, $bp);
}

/// Convierte un valor en em o rem a px
/// @param   {number} $value - var a convertir a pixeles.
@function toPx($value) {
    @if type-of($value) == number {
        @if unit($value) == "em" {
            @return ($value / 1em) * 16px;
        } @else if unit($value) == "rem" {
            @return ($value / 1rem) * 16px;
        } @else if unit($value) == "px" {
            @return $value;
        } @else {
            @error "La funcion toPx() solo acepta numeros en em o rem o px";
        }
    } @else {
        @error "La funcion toPx() solo acepta numeros en em o rem";
    }
}

/// From (mayor que $bp)
/// @param   {number} $from - breakpoint
/// @example scss
///     .elemento {
///       width: 30%;
///       @include from(m) {
///         width: 50%;
///       }
///     }
@mixin from($from) {
    // Si el bp es del core de EDgrid
    @if isCoreBreakpoint($from) {
        // no imprime media query para tamaño s
        @if $from == xm {
            @content;
        }
        // imprime media query en los otros tamaños
        @else {
            @media screen and (min-width: getBp($from)) {
                @content;
            }
        }
    }
    // Si el bp no es del core de EDgrid pero es una unidad válida
    @else if isValidBreakpoint($from) {
        @media screen and (min-width: $from) {
            @content;
        }
    }
    // Error
    @else {
        @error 'El mixin from() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem';
    }
}

/// To (es menor que $to)
/// @param   {number} $to - breakpoint
/// @example scss
///     .elemento {
///       width: 50%;
///       @include to(m) {
///         width: 30%;
///       }
///     }
@mixin to($to) {
    // Si es un breakpoint del core
    @if isCoreBreakpoint($to) {
        @if $to == xm {
            @content;
        } @else {
            @media screen and (max-width: getBp($to)) {
                @content;
            }
        }
    }
    // Si es un breakpoint válido (px, em, rem)
    @else if isValidBreakpoint($to) {
        @media screen and (max-width: toPx($to)) {
            @content;
        }
    }
    // Si no es un breakpoint válido lanzar error
    @else {
        @error 'El mixin to() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem';
    }
}

/// from-to la regla se ejecuta entre ambos breakpoints.
/// @param   {number} $from - breakpoint desde que medida se iniciara la regla.
/// @param   {number} $to - breakpoint hasta que medida se ejecutara la regla.
/// @example scss
///     .elemento {
///       background-color: cyan;
///       @include from-to(s, l) {
///         background-color: darken(cyan, .8);
///       }
///     }
@mixin from-to($from, $to) {
    // Si ambos son breakpoints del core
    @if isCoreBreakpoint($from) and isCoreBreakpoint($to) {
        @if getBp($to) > getBp($from) {
            @media screen and (min-width: getBp($from)) and (max-width: getBp($to)) {
                @content;
            }
        } @else {
            @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
        }
    }

    // Si solo $from es breakpoint del core
    @else if isCoreBreakpoint($from) and not isCoreBreakpoint($to) {
        @if isValidBreakpoint($to) {
            @if toPx($to) > toPx(getBp($from)) {
                @media screen and (min-width: getBp($from)) and (max-width: toPx($to)) {
                    @content;
                }
            } @else {
                @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
            }
        } @else {
            @error "El segundo argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem";
        }
    }

    // Si solo $to es breakpoint del core
    @else if not isCoreBreakpoint($from) and isCoreBreakpoint($to) {
        @if isValidBreakpoint($from) {
            @if toPx(getBp($to)) > toPx($from) {
                @media screen and (min-width: $from) and (max-width: getBp($to)) {
                    @content;
                }
            } @else {
                @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
            }
        } @else {
            @error "El primer argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem";
        }
    }

    // Si no son breakpoints del core pero son breakpoints válidos (px, em, rem)
    @else if isValidBreakpoint($from) and isValidBreakpoint($to) {
        @if toPx($to) > toPx($from) {
            @media screen and (min-width: $from) and (max-width: toPx($to)) {
                @content;
            }
        } @else {
            @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
        }
    }

    // Si al menos hay un breakpoint inválido
    @else {
        @error 'Los argumentos del mixin from-to() deben ser breakpoints del Core (#{map-keys($breakpoints)}) o números en px, em o rem';
    }
}

@function rpt($number, $value) {
    $values: "";
    @for $i from 1 through $number {
        @if $i == 1 {
            $values: $values + $value;
        } @else {
            $values: $values + " " + $value;
        }
    }
    @return unquote($values);
}

@function create-grid-values($values) {
    $values: $values + "";
    $values: check-and-split($values);
    $r: "";
    @each $value in $values {
        $value: $value + "fr";
        $r: $r + " " + $value;
    }
    @return unquote($r);
}

@mixin grid($col: null, $row: null) {
    display: grid;
    @if $col != null {
        grid-template-columns: create-grid-values($col);
    }
    @if $row != null {
        grid-template-rows: create-grid-values($row);
    }
}

@mixin ascendcss-nth($number, $cols, $tagName, $template) {
    @if $number != null and $cols != null {
        #{$tagName}:nth-child(#{$number}) {
            #{$template}: $cols;
        }
    }
}

@mixin ascendcss-span-nth($number, $cols, $tagName, $template) {
    @if $number != null and $cols != null {
        #{$tagName}:nth-child(#{$number}) {
            #{$template}: span $cols;
        }
    }
}

@mixin cols($cols) {
    grid-column-end: span $cols;
}

@mixin cols-nth($number: null, $cols: null, $tagName: div) {
    @include ascendcss-span-nth($number, $cols, $tagName, grid-column-end);
}

@mixin cols-st($col-st) {
    grid-column-start: $col-st;
}
@mixin col-st-nth($number: null, $col-st: null, $tagName: div) {
    @include ascendcss-nth($number, $col-st, $tagName, grid-column-start);
}

@mixin rows($rows) {
    grid-row-end: span $rows;
}

@mixin rows-nth($number: null, $cols: null, $tagName: div) {
    @include ascendcss-span-nth($number, $cols, $tagName, grid-row-end);
}

@mixin cols-st($row-st) {
    grid-row-start: $row-st;
}

@mixin row-st-nth($number: null, $col-st: null, $tagName: div) {
    @include ascendcss-nth($number, $col-st, $tagName, grid-row-start);
}

@function check-and-split($values) {
    @if str-slice($values, 1, 1) == " " {
        $values: str-slice($values, 2, -1);
    }
    $values: str-split($values, " ");
    @return $values
}@function str-split($string, $separator) {
	$split-arr: ();
	$index: str-index($string, $separator);
	@while $index != null {
		$item: str-slice($string, 1, $index - 1);
		$split-arr: append($split-arr, $item);
		$string: str-slice($string, $index + 1);
		$index: str-index($string, $separator);
	}
	$split-arr: append($split-arr, $string);

	@return $split-arr;
}@mixin center {
	display: flex;
	align-items: center;
	justify-content: center;
}
@mixin center-x {
	display: flex;
	justify-content: center;
}
@mixin center-y {
	display: flex;
	align-items: center;
}
@mixin top {
	display: flex;
	align-items: flex-start;
}
@mixin bottom {
	display: flex;
	align-items: flex-end;
}
@mixin left {
	display: flex;
	justify-content: flex-start;
}
@mixin right {
	display: flex;
	justify-content: flex-end;
}
@mixin text-center {
	text-align: center;
}
@mixin text-left {
	text-align: left;
}
@mixin text-right {
	text-align: right;
}@mixin container {
  padding-left: 1rem;
  padding-right: 1rem;
  @include from(md) {
    padding-left: 4rem;
    padding-right: 4rem;
  }
}
@mixin acss_main-btn {
	padding: 0.5rem 0.7rem;
	margin: 8px 0;
	border: none;
	border-radius: 0.2rem;
	cursor: pointer;
	transition: 0.1s;
	outline: none;
	text-decoration: none;
	font-size: 1rem;
	&:active {
		transform: scale(0.98);
	}
}

@mixin btn($bg: #000, $color: #fff) {
	@include acss_main-btn;
	background-color: $bg;
	border: 1px solid $bg;
	color: $color;
	&:hover {
		background-color: darken($bg, 6%);
		border: 1px solid darken($bg, 6%);
	}
}@mixin input($bg: #f2f2f2) {
	padding: 8px 16px;
	margin: 8px 0;
	display: inline-block;
	background-color: $bg;
	border: 1px solid $bg;
	border-radius: 0.2rem;
	width: 100%;
	&::placeholder {
		opacity: 75%;
	}
	&:focus {
		background-color: lighten($bg, 10%);
		outline: none;
		border-bottom: 1px solid $primary-color;
	}
}@mixin navbar($bg: #000, $color: #fff, $hg: 60px, $content-cols: 10fr 2fr) {
    background-color: $bg;
    display: grid;
    grid-template-columns: 11fr 1fr;
    grid-template-rows: $hg;
    height: $hg;
    color: $color;
    box-shadow: 0px 4px 5px 0px rgba(0, 0, 0, 0.2);
    .navbar-brand {
        color: $color;
        font-weight: 600;
        display: flex;
        padding-left: 15px;
        align-items: center;
        text-decoration: none;
    }
    .navbar-content {
        position: relative;
        z-index: 999999;
        display: none;
        padding: 10px 10px 20px 10px;
        background-color: $bg;
        width: 100%;
        transition: 0.3s;
        box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.2);
        grid-column-end: span 2;
    }
    .navbar-links {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: center;
        flex-direction: column;
        color: $color;
        a {
            color: $color;
            margin: 10px 0;
        }
        a:last-child {
            margin-bottom: 30px;
        }
    }
    .navbar-right {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: center;
        color: $color;
        a {
            color: $color;
        }
    }
    .navbar-toggler {
        border: none;
        background: transparent;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: $color;
        padding-right: 15px;
    }
    .navbar-show {
        display: block;
    }
    .active-link {
        font-weight: 600;
    }
    @include from(lg) {
        grid-template-columns: 2fr 10fr;
        .navbar-content {
            position: relative;
            display: grid;
            padding: 0;
            grid-template-rows: 1fr;
            grid-template-columns: $content-cols;
            grid-column-end: span 1;
            height: 100%;
            box-shadow: none;
        }
        .navbar-links {
            flex-direction: row;
            justify-content: center;
            align-items: center;
            a {
                margin: 0 0.8rem;
            }
            a:last-child {
                margin: 0 0.8rem;
            }
        }
        .navbar-toggler {
            display: none;
        }
        .navbar-right {
            padding-right: 10px;
        }
    }
}
// 

// Importar mixins
/// @author EDGrid >-> https://github.com/escueladigital/EDgrid


// Importar layout



// Importar componentes



