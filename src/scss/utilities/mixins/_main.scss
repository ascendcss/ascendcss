@import '../functions/topx';
@import './others';

/// Devuelve true si el breakpoint es parte del core
@function isCoreBreakpoint($bp) {
    @if map-get($breakpoints, $bp) {
        @return true;
    } @else {
        @return false;
    }
}

/// Devuelve true si el breakpint es válido (em, rem, px)
/// @param   {number} $bp - breakpoint a verificar.
@function isValidBreakpoint($bp) {
    @if type-of($bp) == number and (unit($bp) == "px" or unit($bp) == "em" or unit($bp) == "rem") {
        @return true;
    } @else {
        @return false;
    }
}

/// Obtiene un breakpoint del core
/// @param   {number} $bp - breakpoint a obtener.

@function getBp($bp) {
    @return map-get($breakpoints, $bp);
}

/// From (mayor que $bp)
/// @param   {number} $from - breakpoint
/// @example scss
///     .elemento {
///       width: 30%;
///       @include from(m) {
///         width: 50%;
///       }
///     }
@mixin from($from) {
    // Si el bp es del core de EDgrid
    @if isCoreBreakpoint($from) {
        // no imprime media query para tamaño s
        @if $from == xm {
            @content;
        }
        // imprime media query en los otros tamaños
        @else {
            @media screen and (min-width: getBp($from)) {
                @content;
            }
        }
    }
    // Si el bp no es del core de EDgrid pero es una unidad válida
    @else if isValidBreakpoint($from) {
        @media screen and (min-width: $from) {
            @content;
        }
    }
    // Error
    @else {
        @error 'El mixin from() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem';
    }
}

/// To (es menor que $to)
/// @param   {number} $to - breakpoint
@mixin to($to) {
    // Si es un breakpoint del core
    @if isCoreBreakpoint($to) {
        @if $to == xm {
            @content;
        } @else {
            @media screen and (max-width: getBp($to)) {
                @content;
            }
        }
    }
    // Si es un breakpoint válido (px, em, rem)
    @else if isValidBreakpoint($to) {
        @media screen and (max-width: topx($to)) {
            @content;
        }
    }
    // Si no es un breakpoint válido lanzar error
    @else {
        @error 'El mixin to() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem';
    }
}

/// from-to la regla se ejecuta entre ambos breakpoints.
/// @param   {number} $from - breakpoint desde que medida se iniciara la regla.
/// @param   {number} $to - breakpoint hasta que medida se ejecutara la regla.
@mixin from-to($from, $to) {
    // Si ambos son breakpoints del core
    @if isCoreBreakpoint($from) and isCoreBreakpoint($to) {
        @if getBp($to) > getBp($from) {
            @media screen and (min-width: getBp($from)) and (max-width: getBp($to)) {
                @content;
            }
        } @else {
            @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
        }
    }

    // Si solo $from es breakpoint del core
    @else if isCoreBreakpoint($from) and not isCoreBreakpoint($to) {
        @if isValidBreakpoint($to) {
            @if topx($to) > topx(getBp($from)) {
                @media screen and (min-width: getBp($from)) and (max-width: topx($to)) {
                    @content;
                }
            } @else {
                @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
            }
        } @else {
            @error "El segundo argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem";
        }
    }

    // Si solo $to es breakpoint del core
    @else if not isCoreBreakpoint($from) and isCoreBreakpoint($to) {
        @if isValidBreakpoint($from) {
            @if topx(getBp($to)) > topx($from) {
                @media screen and (min-width: $from) and (max-width: getBp($to)) {
                    @content;
                }
            } @else {
                @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
            }
        } @else {
            @error "El primer argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem";
        }
    }

    // Si no son breakpoints del core pero son breakpoints válidos (px, em, rem)
    @else if isValidBreakpoint($from) and isValidBreakpoint($to) {
        @if topx($to) > topx($from) {
            @media screen and (min-width: $from) and (max-width: topx($to)) {
                @content;
            }
        } @else {
            @error "El segundo argumento del mixin from-to debe ser mayor que el primero";
        }
    }

    // Si al menos hay un breakpoint inválido
    @else {
        @error 'Los argumentos del mixin from-to() deben ser breakpoints del Core (#{map-keys($breakpoints)}) o números en px, em o rem';
    }
}