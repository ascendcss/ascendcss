@import '../functions/_topx';
/// Devuelve true si el breakpoint es parte del core
isCoreBreakpoint(bp) {
    return bp = breakpoints[bp] ? true : false;
}

// Devuelve true si el breakpint es válido (em, rem, px)
/// @param   {number} $bp - breakpoint a verificar.
isValidBreakpoint(bp) {
    if typeof(bp) == 'unit' && (unit(bp) == 'px' || unit(bp) == 'em' || unit(bp) ==  'rem') {
        return true;
    } else {
        return false;
    }
}

/// From (mayor que $bp)
/// @param   {number} $from - breakpoint
from(from) {
    // Si el bp es del core de EDgrid
    if isCoreBreakpoint(from) {
        // no imprime media query para tamaño s
        if from == xm {
            {block};
        }
        // imprime media query en los otros tamaños
        else {
            @media screen and (min-width: breakpoints[from]) {
                {block};
            }
        }
    }
    // Si el bp no es del core de EDgrid pero es una unidad válida
    else if isValidBreakpoint(from) {
        @media screen and (min-width: from) {
            {block};
        }
    }
    // Error
    else {
        error('El mixin from() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem');
    }
}

/// To (es menor que $to)
/// @param   {number} $to - breakpoint
to(to) {
    // Si es un breakpoint del core
    if isCoreBreakpoint(to) {
        if to == xm {
            {block};
        } else {
            @media screen and (max-width: breakpoints[to]) {
                {block};
            }
        }
    }
    // Si es un breakpoint válido (px, em, rem)
    else if isValidBreakpoint(to) {
        @media screen and (max-width: topx(to)) {
            {block};
        }
    }
    // Si no es un breakpoint válido lanzar error
    else {
        error('El mixin to() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem');
    }
}

/// from-to la regla se ejecuta entre ambos breakpoints.
/// @param   {number} $from - breakpoint desde que medida se iniciara la regla.
/// @param   {number} $to - breakpoint hasta que medida se ejecutara la regla.
from_to(from, to) {
    // Si ambos son breakpoints del core
    if isCoreBreakpoint(from) and isCoreBreakpoint(to) {
        if breakpoints[to] > breakpoints[from] {
            @media screen and (min-width: breakpoints[from]) and (max-width: breakpoints[to]) {
                {block};
            }
        } else {
            error('El segundo argumento del mixin from-to debe ser mayor que el primero');
        }
    }

    // Si solo $from es breakpoint del core
    else if isCoreBreakpoint(from) and !isCoreBreakpoint(to) {
        if isValidBreakpoint(to) {
            if topx(to) > topx(breakpoints[from]) {
                @media screen and (min-width: breakpoints[from]) and (max-width: topx(to)) {
                    {block};
                }
            } else {
                error('El segundo argumento del mixin from-to debe ser mayor que el primero');
            }
        } else {
            error('El segundo argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem');
        }
    }

    // Si solo $to es breakpoint del core
    else if !isCoreBreakpoint(from) and isCoreBreakpoint(to) {
        if isValidBreakpoint(from) {
            if topx(breakpoints[to]) > topx(from) {
                @media screen and (min-width: from) and (max-width: breakpoints[to]) {
                    {block};
                }
            } else {
                error('El segundo argumento del mixin from-to debe ser mayor que el primero');
            }
        } else {
            error('El primer argumento del mixin from-to() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem');
        }
    }

    // Si no son breakpoints del core pero son breakpoints válidos (px, em, rem)
    else if isValidBreakpoint(from) and isValidBreakpoint(to) {
        if topx(to) > topx(from) {
            @media screen and (min-width: from) and (max-width: topx(to)) {
                {block};
            }
        } else {
            error('El segundo argumento del mixin from-to debe ser mayor que el primero');
        }
    }

    // Si al menos hay un breakpoint inválido
    else {
        error('Los argumentos del mixin from-to() deben ser breakpoints del Core (#{map-keys($breakpoints)}) o números en px, em o rem');
    }
}